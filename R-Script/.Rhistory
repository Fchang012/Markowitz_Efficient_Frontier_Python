getSymbols(c("SPY",
"BHF",
"COP",
"T",
"MRK"), from=as.Date("16-01-01", format="%y-%m-%d"))
# Options Info ------------------------------------------------------------
# Turning it into a function
OptionChain <- function(stockTickerDF, thePeriod=1){
# get ticker name
stockTicker <- deparse(substitute(stockTickerDF))
# Getting historical options prices
HistoricalOptionPriceDF <- stockTickerDF[options.expiry(stockTickerDF),]
# Get All Option Chains
theOptionChain <- getOptionChain(stockTicker, "2018")
# Options Chain - Calls In the Money (NextOptions Expiry Date)
CallInTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike <= getQuote(stockTicker)$Last,]
# Options Chain - Puts In The Money (NextOptions Expiry Date)
PutInTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike >= getQuote(stockTicker)$Last,]
# Implementation of the Put/Call Ratio (Volume)
# Total vol sum of Call Option / Total vol sum of Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
VolPut <- sum(theOptionChain[[thePeriod]]$puts$Vol)
VolCall <- sum(theOptionChain[[thePeriod]]$calls$Vol)
PutToCallRatioVol <- VolPut/VolCall
# Implementation of the Put/Call Ratio (Open Interest)
# Total sum OI Call Option / Total sum OI Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
OIPut <- sum(theOptionChain[[thePeriod]]$puts$OI)
OICall <- sum(theOptionChain[[thePeriod]]$calls$OI)
PutToCallRatioOI <- OIPut/OICall
# Options Chain - Calls Out of the Money (NextOptions Expiry Date)
CallOutOfTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike >= getQuote(stockTicker)$Last,]
# Options Chain - Puts Out of The Money (NextOptions Expiry Date)
PutOutOfTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike <= getQuote(stockTicker)$Last,]
# Return the List
theList <- list("HistoricalOptionPriceDF" = HistoricalOptionPriceDF,
"theOptionChain" = theOptionChain,
"CallInTheMoney" = CallInTheMoney,
"PutInTheMoney" = PutInTheMoney,
"VolCall" = VolCall,
"VolPut" = VolPut,
"PutToCallRatioVol" = PutToCallRatioVol,
"OICall" = OICall,
"OIPut" = OIPut,
"PutToCallRatioOI" = PutToCallRatioOI,
"CallOutOfTheMoney" = CallOutOfTheMoney,
"PutOutOfTheMoney" = PutOutOfTheMoney)
return(theList)
}
TOption <- OptionChain(T)
TOption$PutToCallRatioVol
TOption$PutToCallRatioOI
SPYOption <- OptionChain(SPY)
SPYOption$PutToCallRatioVol
SPYOption$PutToCallRatioOI
SPYOption$CallOutOfTheMoney
SPYOption$theOptionChain$Feb.26.2018
getQuote("SPY")
COPOption <- OptionChain(COP)
COPOption$PutToCallRatioVol
COPOption$PutToCallRatioOI
COPOption$CallOutOfTheMoney
COPOption$PutOutOfTheMoney
COPOption$CallInTheMoney
COPOption$CallOutOfTheMoney
COPOption$PutInTheMoney
COPOption$PutOutOfTheMoney
COPOption$PutOutOfTheMoney
COPOption$CallOutOfTheMoney
COPOption$PutToCallRatioVol
COPOption$PutToCallRatioOI
x11()
chartSeries(COP)
addBBands()
addMACD()
addRSI()
addExpiry()
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("SPY",
"BHF",
"COP",
"T",
"MRK"), from=as.Date("16-01-01", format="%y-%m-%d"))
# Options Info ------------------------------------------------------------
# Turning it into a function
OptionChain <- function(stockTickerDF, thePeriod=1){
# get ticker name
stockTicker <- deparse(substitute(stockTickerDF))
# Getting historical options prices
HistoricalOptionPriceDF <- stockTickerDF[options.expiry(stockTickerDF),]
# Get All Option Chains
theOptionChain <- getOptionChain(stockTicker, "2018")
# Options Chain - Calls In the Money (NextOptions Expiry Date)
CallInTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike <= getQuote(stockTicker)$Last,]
# Options Chain - Puts In The Money (NextOptions Expiry Date)
PutInTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike >= getQuote(stockTicker)$Last,]
# Implementation of the Put/Call Ratio (Volume)
# Total vol sum of Call Option / Total vol sum of Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
VolPut <- sum(theOptionChain[[thePeriod]]$puts$Vol)
VolCall <- sum(theOptionChain[[thePeriod]]$calls$Vol)
PutToCallRatioVol <- VolPut/VolCall
# Implementation of the Put/Call Ratio (Open Interest)
# Total sum OI Call Option / Total sum OI Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
OIPut <- sum(theOptionChain[[thePeriod]]$puts$OI)
OICall <- sum(theOptionChain[[thePeriod]]$calls$OI)
PutToCallRatioOI <- OIPut/OICall
# Options Chain - Calls Out of the Money (NextOptions Expiry Date)
CallOutOfTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike >= getQuote(stockTicker)$Last,]
# Options Chain - Puts Out of The Money (NextOptions Expiry Date)
PutOutOfTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike <= getQuote(stockTicker)$Last,]
# Return the List
theList <- list("HistoricalOptionPriceDF" = HistoricalOptionPriceDF,
"theOptionChain" = theOptionChain,
"CallInTheMoney" = CallInTheMoney,
"PutInTheMoney" = PutInTheMoney,
"VolCall" = VolCall,
"VolPut" = VolPut,
"PutToCallRatioVol" = PutToCallRatioVol,
"OICall" = OICall,
"OIPut" = OIPut,
"PutToCallRatioOI" = PutToCallRatioOI,
"CallOutOfTheMoney" = CallOutOfTheMoney,
"PutOutOfTheMoney" = PutOutOfTheMoney)
return(theList)
}
# After running OptionChain function run this to get call spread with break @ the money
callSpread <- function(theOptionList){
theOptionList$CallInTheMoney
theOptionList$CallOutOfTheMoney
}
# After running OptionChain function run this to get put spread with break @ the money
putSpread <- function(theOptionList){
theOptionList$PutOutOfTheMoney
theOptionList$PutInTheMoney
}
SPYOption <- OptionChain(SPY)
SPYOption$PutToCallRatioVol
SPYOption$PutToCallRatioOI
callSpread(SPYOption)
getQuote("SPY")
putSpread(SPYOption)
SPYOption$CallOutOfTheMoney
callSpread(SPYOption)
SPYOption$CallInTheMoney
print(SPYOption$CallInTheMoney)
print(\u2500)
print(raw(\u2500))
print("\u2500")
rep("\u2500", 10)
rep("\u2E3B", 10)
rep("\U2E3B", 10)
print("------------------------------------------------------------")
callSpread <- function(theOptionList){
print(theOptionList$CallInTheMoney)
print("------------------------------------------------------------")
print(theOptionList$CallOutOfTheMoney)
}
# After running OptionChain function run this to get put spread with break @ the money
putSpread <- function(theOptionList){
print(theOptionList$PutOutOfTheMoney)
print("------------------------------------------------------------")
print(theOptionList$PutInTheMoney)
}
callSpread(SPYOption)
raw("-")
?`raw
?raw
putSpread(SPYOptopm)
putSpread(SPYOption)
SPYOption$PutToCallRatioVol
TOption <- OptionChain(T)
callSpread(TOption)
TOption$PutToCallRatioVol
x11()
chartSeries(T)
addBBands()
addMACD()
addRSI()
addExpiry()
BHFOption <- OptionChain(BHF)
BHFOption$PutToCallRatioVol
callSpread(BHFOption)
x11()
chartSeries(BHF)
addBBands()
addMACD()
addRSI()
addExpiry()
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("SPY",
"BHF",
"COP",
"T",
"MRK"), from=as.Date("16-01-01", format="%y-%m-%d"))
# Options Info ------------------------------------------------------------
# Turning it into a function
OptionChain <- function(stockTickerDF, thePeriod=1){
# get ticker name
stockTicker <- deparse(substitute(stockTickerDF))
# Getting historical options prices
HistoricalOptionPriceDF <- stockTickerDF[options.expiry(stockTickerDF),]
# Get All Option Chains
theOptionChain <- getOptionChain(stockTicker, "2018")
# Options Chain - Calls In the Money (NextOptions Expiry Date)
CallInTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike <= getQuote(stockTicker)$Last,]
# Options Chain - Puts In The Money (NextOptions Expiry Date)
PutInTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike >= getQuote(stockTicker)$Last,]
# Implementation of the Put/Call Ratio (Volume)
# Total vol sum of Call Option / Total vol sum of Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
VolPut <- sum(theOptionChain[[thePeriod]]$puts$Vol)
VolCall <- sum(theOptionChain[[thePeriod]]$calls$Vol)
PutToCallRatioVol <- VolPut/VolCall
# Implementation of the Put/Call Ratio (Open Interest)
# Total sum OI Call Option / Total sum OI Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
OIPut <- sum(theOptionChain[[thePeriod]]$puts$OI)
OICall <- sum(theOptionChain[[thePeriod]]$calls$OI)
PutToCallRatioOI <- OIPut/OICall
# Options Chain - Calls Out of the Money (NextOptions Expiry Date)
CallOutOfTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike >= getQuote(stockTicker)$Last,]
# Options Chain - Puts Out of The Money (NextOptions Expiry Date)
PutOutOfTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike <= getQuote(stockTicker)$Last,]
# Return the List
theList <- list("HistoricalOptionPriceDF" = HistoricalOptionPriceDF,
"theOptionChain" = theOptionChain,
"CallInTheMoney" = CallInTheMoney,
"PutInTheMoney" = PutInTheMoney,
"VolCall" = VolCall,
"VolPut" = VolPut,
"PutToCallRatioVol" = PutToCallRatioVol,
"OICall" = OICall,
"OIPut" = OIPut,
"PutToCallRatioOI" = PutToCallRatioOI,
"CallOutOfTheMoney" = CallOutOfTheMoney,
"PutOutOfTheMoney" = PutOutOfTheMoney)
return(theList)
}
# After running OptionChain function run this to get call spread with break @ the money
callSpread <- function(theOptionList){
print(theOptionList$CallInTheMoney)
print("------------------------------------------------------------")
print(theOptionList$CallOutOfTheMoney)
}
# After running OptionChain function run this to get put spread with break @ the money
putSpread <- function(theOptionList){
print(theOptionList$PutOutOfTheMoney)
print("------------------------------------------------------------")
print(theOptionList$PutInTheMoney)
}
TOption <- options(T)
TOption <- OptionChain(T)
TOption$PutToCallRatioVol
TOption$PutToCallRatioOI
callSpread(TOption)
putSpread(TOption)
COPOption <- OptionChain(COP)
COPOption <- OptionChain(COP,3)
COPOption$PutToCallRatioVol
COPOption$PutToCallRatioOI
callSpread(COPOption)
putSpread(COPOption)
x11()
chartSeries(COP)
addBBands()
addMACD()
addRSI()
addExpiry()
BHFOption <- OptionChain(BHF)
BHFOption$PutToCallRatioVol
BHFOption$PutToCallRatioOI
callSpread(BHFOption)
putSpread(BHFOption)
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("SPY",
"BHF",
"COP",
"T",
"MRK"), from=as.Date("16-01-01", format="%y-%m-%d"))
# Options Info ------------------------------------------------------------
# Turning it into a function
OptionChain <- function(stockTickerDF, thePeriod=1){
# get ticker name
stockTicker <- deparse(substitute(stockTickerDF))
# Getting historical options prices
HistoricalOptionPriceDF <- stockTickerDF[options.expiry(stockTickerDF),]
# Get All Option Chains
theOptionChain <- getOptionChain(stockTicker, "2018")
# Options Chain - Calls In the Money (NextOptions Expiry Date)
CallInTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike <= getQuote(stockTicker)$Last,]
# Options Chain - Puts In The Money (NextOptions Expiry Date)
PutInTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike >= getQuote(stockTicker)$Last,]
# Implementation of the Put/Call Ratio (Volume)
# Total vol sum of Call Option / Total vol sum of Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
VolPut <- sum(theOptionChain[[thePeriod]]$puts$Vol)
VolCall <- sum(theOptionChain[[thePeriod]]$calls$Vol)
PutToCallRatioVol <- VolPut/VolCall
# Implementation of the Put/Call Ratio (Open Interest)
# Total sum OI Call Option / Total sum OI Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
OIPut <- sum(theOptionChain[[thePeriod]]$puts$OI)
OICall <- sum(theOptionChain[[thePeriod]]$calls$OI)
PutToCallRatioOI <- OIPut/OICall
# Options Chain - Calls Out of the Money (NextOptions Expiry Date)
CallOutOfTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike >= getQuote(stockTicker)$Last,]
# Options Chain - Puts Out of The Money (NextOptions Expiry Date)
PutOutOfTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike <= getQuote(stockTicker)$Last,]
# Return the List
theList <- list("HistoricalOptionPriceDF" = HistoricalOptionPriceDF,
"theOptionChain" = theOptionChain,
"CallInTheMoney" = CallInTheMoney,
"PutInTheMoney" = PutInTheMoney,
"VolCall" = VolCall,
"VolPut" = VolPut,
"PutToCallRatioVol" = PutToCallRatioVol,
"OICall" = OICall,
"OIPut" = OIPut,
"PutToCallRatioOI" = PutToCallRatioOI,
"CallOutOfTheMoney" = CallOutOfTheMoney,
"PutOutOfTheMoney" = PutOutOfTheMoney)
return(theList)
}
# After running OptionChain function run this to get call spread with break @ the money
callSpread <- function(theOptionList){
print(theOptionList$CallInTheMoney)
print("------------------------------------------------------------")
print(theOptionList$CallOutOfTheMoney)
}
# After running OptionChain function run this to get put spread with break @ the money
putSpread <- function(theOptionList){
print(theOptionList$PutOutOfTheMoney)
print("------------------------------------------------------------")
print(theOptionList$PutInTheMoney)
}
getSymbols("AMZN")
AMZNOptions <- OptionChain(AMZN)
AMZNOptions <- OptionChain(AMZN,3)
AMZNOptions$PutToCallRatioVol
AMZNOptions$PutToCallRatioOI
callSpread(AMZNOptions)
AMZNOptions$OICall
callSpread(AMZNOptions)
putSpread(AMZNOptions)
sample(1:9,5, replace=T)
sample(1:9,5, replace=T)
sample(1:9,5, replace=T)
sample(1:9,5, replace=T)
sample(1:9,5, replace=T)
require(quantmod)
getSymbols("VGSTX")
x11()
chartSeries("VGSTX")
allReturns(VGSTX, subset="2013::")
VGSTXReturns <- allReturns(VGSTX, subset="2013::")
View(VGSTXReturns)
VGSTXReturns <- allReturns(VGSTX, subset='2013-01-01::')
VGSTXReturns <- dailyReturn(VGSTX, subset = '2013-01-01::')
VGSTXReturns <- monthlyReturn(VGSTX, subset = '2013-01-01::')
chartSeries(VGSTX)
x11()
chartSeries(VGSTX)
VGSTXReturns <- yearlyReturn(VGSTX)
mean(VGSTXReturns)
getSymbols(VGT)
getSymbols("VGT")
VGTReturn <- yearlyReturn(VGT)
View(VGTReturn)
mean(VGTReturn)
VGTReturn <- yearlyReturn(VGT, subset = "2009::")
mean(VGTReturn)
# R Script to get financial data from yahoo and google APIs
# Libraries ---------------------------------------------------------------
require(quantmod)
# Get Stock Info ----------------------------------------------------------
getSymbols(c("SPY",
"BHF",
"COP",
"T",
"MRK"), from=as.Date("16-01-01", format="%y-%m-%d"))
# Options Info ------------------------------------------------------------
# Turning it into a function
OptionChain <- function(stockTickerDF, thePeriod=1){
# get ticker name
stockTicker <- deparse(substitute(stockTickerDF))
# Getting historical options prices
HistoricalOptionPriceDF <- stockTickerDF[options.expiry(stockTickerDF),]
# Get All Option Chains
theOptionChain <- getOptionChain(stockTicker, "2018")
# Options Chain - Calls In the Money (NextOptions Expiry Date)
CallInTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike <= getQuote(stockTicker)$Last,]
# Options Chain - Puts In The Money (NextOptions Expiry Date)
PutInTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike >= getQuote(stockTicker)$Last,]
# Implementation of the Put/Call Ratio (Volume)
# Total vol sum of Call Option / Total vol sum of Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
VolPut <- sum(theOptionChain[[thePeriod]]$puts$Vol)
VolCall <- sum(theOptionChain[[thePeriod]]$calls$Vol)
PutToCallRatioVol <- VolPut/VolCall
# Implementation of the Put/Call Ratio (Open Interest)
# Total sum OI Call Option / Total sum OI Put Option
# 1 = Neutral
# > 1 = Bearish
# < 1 = Bullish
OIPut <- sum(theOptionChain[[thePeriod]]$puts$OI)
OICall <- sum(theOptionChain[[thePeriod]]$calls$OI)
PutToCallRatioOI <- OIPut/OICall
# Options Chain - Calls Out of the Money (NextOptions Expiry Date)
CallOutOfTheMoney <- theOptionChain[[thePeriod]]$calls[theOptionChain[[thePeriod]]$calls$Strike >= getQuote(stockTicker)$Last,]
# Options Chain - Puts Out of The Money (NextOptions Expiry Date)
PutOutOfTheMoney <- theOptionChain[[thePeriod]]$puts[theOptionChain[[thePeriod]]$puts$Strike <= getQuote(stockTicker)$Last,]
# Return the List
theList <- list("HistoricalOptionPriceDF" = HistoricalOptionPriceDF,
"theOptionChain" = theOptionChain,
"CallInTheMoney" = CallInTheMoney,
"PutInTheMoney" = PutInTheMoney,
"VolCall" = VolCall,
"VolPut" = VolPut,
"PutToCallRatioVol" = PutToCallRatioVol,
"OICall" = OICall,
"OIPut" = OIPut,
"PutToCallRatioOI" = PutToCallRatioOI,
"CallOutOfTheMoney" = CallOutOfTheMoney,
"PutOutOfTheMoney" = PutOutOfTheMoney)
return(theList)
}
# After running OptionChain function run this to get call spread with break @ the money
callSpread <- function(theOptionList){
print(theOptionList$CallInTheMoney)
print("------------------------------------------------------------")
print(theOptionList$CallOutOfTheMoney)
}
# After running OptionChain function run this to get put spread with break @ the money
putSpread <- function(theOptionList){
print(theOptionList$PutOutOfTheMoney)
print("------------------------------------------------------------")
print(theOptionList$PutInTheMoney)
}
x11()
chartSeries(SPY)
addBBands()
addMACD()
addRSI()
addExpiry()
SPYOption <- OptionChain(SPY)
SPYOption$PutToCallRatioVol
SPYOption$PutToCallRatioOI
callSpread(SPYOption)
putSpread(SPYOption)
require(quantmod)
getSymbols("SPY")
?quantmod
getSymbols("SPY", from=as.date("18-02-24", format="%y-%m-%d"))
getSymbols("SPY", from=as.Date("18-02-24", format="%y-%m-%d"))
allReturns(SPY
)
SPY_Return <- allReturns(SPY)
View(SPY_Return)
View(SPY)
require(quantmod)
getSymbols()
getSymbols("VTI")
chartSeries(VTI)
x11()
chartSeries(VTI)
zoomChart('2017-08-01::')
addBBands()
addRSI()
addMACD()
source('E:/Shared_Files/Fchang012/Markowitz_Efficient_Frontier_Python/R-Script/HTML_Table_Parse.R', echo=TRUE)
RAWHTMLTable <- read_xml("./Fidelity/RAW,txt", as_html = T)
RAWHTMLTable <- read_xml("./Fidelity/RAW.txt", as_html = T)
RAWHTMLTable
RAWHTMLTable <- xmlTreeParse(RAWHTMLTable)[[1]]
RAWHTMLTable <- read_xml("./Fidelity/RAW.txt", as_html = T)
RAWHTMLTable
xmlTreeParse(RAWHTMLTable)
xmlTreeParse(RAWHTMLTable)[[1]]
RAWHTMLTable <- xmlTreeParse(RAWHTMLTable)[[1]]
top <- xmlRoot(RAWHTMLTable)
top
top
headers <- getNodeSet(top, '//div[@ngIf="item.close"]')
